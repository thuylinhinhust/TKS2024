$date
	Thu Sep 19 06:18:29 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module forwarding_unit_tb $end
$var wire 1 ! DATAMEMSEL $end
$var wire 1 " DATA2IDSEL $end
$var wire 2 # DATA2BJSEL [1:0] $end
$var wire 2 $ DATA2ALUSEL [1:0] $end
$var wire 1 % DATA1IDSEL $end
$var wire 2 & DATA1BJSEL [1:0] $end
$var wire 2 ' DATA1ALUSEL [1:0] $end
$var reg 5 ( ADDR1 [4:0] $end
$var reg 5 ) ADDR2 [4:0] $end
$var reg 5 * EXE_ADDR [4:0] $end
$var reg 5 + MEM_ADDR [4:0] $end
$var reg 1 , OP1SEL $end
$var reg 1 - OP2SEL $end
$var reg 7 . OPCODE [6:0] $end
$var reg 5 / WB_ADDR [4:0] $end
$scope module my_forwarding_unit $end
$var wire 5 0 ADDR1 [4:0] $end
$var wire 5 1 ADDR2 [4:0] $end
$var wire 1 % DATA1IDSEL $end
$var wire 1 " DATA2IDSEL $end
$var wire 1 ! DATAMEMSEL $end
$var wire 5 2 EXE_ADDR [4:0] $end
$var wire 1 3 INST_MASK $end
$var wire 1 4 I_TYPE $end
$var wire 1 5 JALR $end
$var wire 1 6 LOAD $end
$var wire 5 7 MEM_ADDR [4:0] $end
$var wire 1 8 MEM_EXE_ALU_DATA1 $end
$var wire 1 9 MEM_EXE_ALU_DATA2 $end
$var wire 1 : MEM_EXE_BJ_DATA1 $end
$var wire 1 ; MEM_EXE_BJ_DATA2 $end
$var wire 5 < MEM_EXE_XNOR_DATA1 [4:0] $end
$var wire 5 = MEM_EXE_XNOR_DATA2 [4:0] $end
$var wire 1 , OP1SEL $end
$var wire 1 - OP2SEL $end
$var wire 7 > OPCODE [6:0] $end
$var wire 1 ? R_TYPE $end
$var wire 1 @ STORE $end
$var wire 5 A WB_ADDR [4:0] $end
$var wire 1 B WB_EXE_ALU_DATA1 $end
$var wire 1 C WB_EXE_ALU_DATA2 $end
$var wire 1 D WB_EXE_BJ_DATA1 $end
$var wire 1 E WB_EXE_BJ_DATA2 $end
$var wire 5 F WB_EXE_XNOR_DATA1 [4:0] $end
$var wire 5 G WB_EXE_XNOR_DATA2 [4:0] $end
$var wire 5 H WB_ID_XNOR_DATA1 [4:0] $end
$var wire 5 I WB_ID_XNOR_DATA2 [4:0] $end
$var wire 2 J DATA2BJSEL [1:0] $end
$var wire 2 K DATA2ALUSEL [1:0] $end
$var wire 2 L DATA1BJSEL [1:0] $end
$var wire 2 M DATA1ALUSEL [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 M
b0 L
b0 K
b0 J
b11100 I
b11111 H
b11001 G
b11010 F
0E
0D
0C
0B
b1 A
0@
1?
b110011 >
b11000 =
b11011 <
0;
0:
09
08
b100 7
06
05
04
13
b101 2
b10 1
b1 0
b1 /
b110011 .
0-
0,
b100 +
b101 *
b10 )
b1 (
b0 '
b0 &
1%
b0 $
b0 #
0"
0!
$end
#500
